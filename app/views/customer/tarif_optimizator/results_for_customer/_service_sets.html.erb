<%
#raise(StandadError)
table.init do |t|
  t.caption = 'Список лучших тарифов'
  t.base_name = 'service_sets'
  t.current_id_name = 'service_sets_id'
  t.pagination_per_page = 10
  t.id_name = 'service_sets_id'
  model_keys = t.model.collect {|row| row.keys }.flatten.uniq.collect{|key| key }.compact  
  t.heads = ['Оператор', 'Тариф', 'Стоимость в месяц, руб', 'Кол-во обработанных записей', 'Общие услуги и тарифные опции', 
  	'Взаимозаменяемые опции', 'Кол-во минут', 'Кол-во смс и ммс', 'Объем интернета, Мб']
  
  t.set_fields do |f|
    services = f['services'].map do |service_id|
    	if f and f['service_description'] and f['service_description'][service_id]
    		service_name = f['service_description'][service_id]['name']
    		service_http = f['service_description'][service_id]['http']
    	end      	 
        link_to_if(service_http, service_name, service_http)	
    end.join(', ') if f['services']

    identical_services = f['identical_services'].map do |identical_service_group|
    	identical_services_for_one_group = identical_service_group.map do |item|     	
	    	link_to_if(item['service_http'], item['service_name'], item['service_http'])      	 
	    end.compact.join(', ') if identical_service_group
        "(#{identical_services_for_one_group})"
    end.join(', ') if f['identical_services']
    
  	[
     f['operator_name'],     
  	 link_to_if(f['tarif_http'], f['tarif_name'], f['tarif_http']),    
     f['tarif_cost'],      
     f['service_set_count'],      
     services,
     identical_services,
     f['calls_volume'],
     f['sms_volume'],
     f['internet_volume'],
#     f['stat_results']
#	 model_keys,    
  	] 
  	
  end
end
%>

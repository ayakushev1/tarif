<%
table.init do |t|
  t.caption = 'Tarif results'
  t.base_name = 'tarif_results'
  t.current_id_name = 'tarif_class_id'
  t.pagination_per_page = 20
  t.id_name = 'tarif_class_id'  
  model_keys = t.model.collect {|row| row.keys }.flatten.uniq.collect{|key| key unless [].include?(key)}.compact  
#  model_keys = t.model.collect {|row| row.keys }.flatten.uniq.collect{|key| key unless ['tarif_set_by_part_id', 'price_values', 'call_ids', 'id'].include?(key)}.compact  
#  model_keys = t.model.collect {|row| row.keys }.flatten.uniq.collect{|key| key unless ['price_values', 'call_ids', 'id'].include?(key)}.compact  
#  model_keys = t.model.collect {|row| row.keys }.flatten.uniq.collect{|key| key unless ['price_values', 'id'].include?(key)}.compact  
  t.heads = model_keys.collect{|model_key| model_key.split('_').join(' ')}
  t.set_fields do |f| 
  	model_keys.collect do |key|
  	  if key == 'price_value'
  	  	f[key].to_f.round(2) if f[key]
  	  else
  	  	f[key]
  	  end 
    end
  end

=begin
  t.heads = 
  ['part', 'tarif_class_id', 'call_ids', 'call_id_count', 'price_value']
  t.set_fields do |t| 
  	duplicates = t['call_ids'].uniq! ? (t['call_ids'] + t['call_ids'] - t['call_ids'].uniq).sort.to_s : [] if t['call_ids']
  	show_if_no_duplicates = ""#t['call_ids'].sort.to_s
  [
  	t['part'],
  	t['tarif_class_id'],
  	(t['call_ids'].uniq! ? "there are duplicates: " + duplicates : show_if_no_duplicates if t['call_ids']),
  	t['call_id_count'],
  	(t['price_value'].to_f.round(2) if t['price_value']),
#  	t['price_values']
  ] 
  end
=end

end
%>



<%=
  	model_init_data = {
      :result_type => 'optimization_results',
      :result_name => 'prepared_final_tarif_results',
      :user_id => current_user.id,
    }
    
    demo_result_where_string = if !model_init_data[:demo_result_id].blank?
      "result_key->'demo_result'->>'id' = '#{model_init_data[:demo_result_id].to_s}'"
    else
      "(result_key->'demo_result'->>'id')::integer is null"
    end
    tarif_id_where_string = if model_init_data[:tarif_id]
      "tarif_id = #{model_init_data[:tarif_id]}"
    else
      'true'
    end
    
    init_result_model_without_select = Customer::Stat.
	    where(:result_type => model_init_data[:result_type]).
	    where(:result_name => model_init_data[:result_name]).
	    where(demo_result_where_string).
	    where(:user_id => model_init_data[:user_id]).
	    where(tarif_id_where_string)

  	init_result_model =  init_result_model_without_select.select("result as #{model_init_data[:result_name]}")

    result_model = init_result_model
    results = {}

    result_model.each do |result_item|

        result_item.attributes[model_init_data[:result_name]].each do |result_type, result_value|
          if result_value.is_a?(Hash)
            results[result_type] ||= {}
            results[result_type].merge!(result_value)
          else
            results[result_type] = result_value
          end
        end if result_item and result_item.attributes and model_init_data and model_init_data[:result_name] and result_item.attributes[model_init_data[:result_name]]
    end if result_model







  prepared_service_sets = results['service_set']

    result = []
    operators_to_choose = [] #operators_to_choose.map(&:to_i)
    prepared_service_sets.each do |service_set_id, prepared_service_set|
#      raise(StandardError, prepared_service_set)
      next if !operators_to_choose.blank? and !operators_to_choose.include?(prepared_service_set["operator"])
      result << {'service_sets_id' => service_set_id}.merge(prepared_service_set)
    end if prepared_service_sets
    result = result.compact
    new_result = []
    
    result.each do |f|
      additions = {}
      
      tarif_id = f['tarif'].to_s if f['tarif']
      
      additions['operator_name'] = (f['operator_description']['name'] if f and f['operator_description'])
      additions['tarif_name'] = (f['service_description'][tarif_id]['name'] if f and tarif_id and f['service_description'] and f['service_description'][tarif_id])
      additions['tarif_http'] = (f['service_description'][tarif_id]['http'] if f and tarif_id and f['service_description'] and f['service_description'][tarif_id])
      additions['tarif_cost'] = (f['service_set_price'].to_f.round(0) if f and f['service_set_price'])
      additions['service_set_count'] = (f['service_set_count'].to_i if f and f['service_set_count'])
        
      additions['services'] = (f['service_sets_id'].split('_') - [tarif_id]).map do |service_id|
        if f and f['service_description'] and f['service_description'][service_id]
          {
            'service_name' => f['service_description'][service_id]['name'], 
            'service_http' => f['service_description'][service_id]['http'],
            'service_type' => f['service_description'][service_id]['standard_service_id']
            }
        end        
      end.compact if f['service_sets_id']
      
      additions['common_services'] = additions['services'].map do |service|
        service if service['service_type'] == 41 #common_service
      end.compact
  
      additions['tarif_options'] = additions['services'].map do |service|
        service if service['service_type'] != 41 # common_service
      end.compact
  
      additions['identical_services'] = f['identical_services'].map do |identical_service_group|
        identical_services_for_one_group = identical_service_group.map do |service_ids|
          identical_services_for_one_tarif_set = service_ids.split('_').map do |service_id|
            if f and f['service_description'] and f['service_description'][service_id] 
              {'service_name' => f['service_description'][service_id]['name'],  'service_http' => f['service_description'][service_id]['http']}
            end
          end.compact if service_ids
          identical_services_for_one_tarif_set
        end.compact if identical_service_group
        identical_services_for_one_group
      end.compact if f['identical_services']
      
      if f and f['stat_results']
        additions['calls_volume'] = f['stat_results']['sum_duration_minute'].round(0) if f['stat_results']['sum_duration_minute']
        additions['sms_volume'] = f['stat_results']['count_volume'].round(0) if f['stat_results']['count_volume']
        additions['internet_volume'] = f['stat_results']['sum_volume'].round(0) if f['stat_results']['sum_volume']
      end

      new_result << f.merge(additions)
    end
    new_result.sort_by!{|item| item['service_set_price']}  
    
 

%>



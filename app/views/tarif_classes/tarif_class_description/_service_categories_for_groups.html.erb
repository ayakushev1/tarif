<%
table.init do |t|
#  t.caption = 'Price lists'
#  t.heads = ['Id', 'Name', 'tarif class', 'tarif list', 'service category group', 'service category tarif class', 'Is active', 'Features', 'Description']
  t.heads = ['Кол-во цен', 'Price', 'Price order', 'service category group', 'calls', 'rouming', 'geo', 'partner', 'Is active', 'Conditions - tarif']
  t.set_fields do |f| 
  	s = PriceList.where(:service_category_group_id => f.as_standard_category_group_id)
  	
  	tarif_set_must_include_tarif_options = if f.conditions
  		TarifClass.where(:id => f.conditions['tarif_set_must_include_tarif_options']).pluck(:name)
  	end
  [
	 s.map(&:formulas).count,
#	 s.map{|r| r.formulas.map(&:price).map{|w| w.to_s(:rounded, precision: 2)}[0]}[0],
	 s.map{|r| r.formulas.map(&:calculation_order)[0]}[0],
#    f.id, 
#    f.name, 
    (f.as_standard_category_group.name if f.as_standard_category_group), 
    (f.service_category_calls.name if f and f.service_category_calls),
    (f.service_category_rouming.name if f and f.service_category_rouming),
    (f.service_category_geo.name if f and f.service_category_geo),
    (f.service_category_partner_type.name if f and f.service_category_partner_type),
#    (f.service_category_one_time.name if s and s.service_category_one_time),
#    (f.service_category_periodic.name if s and s.service_category_periodic),
    f.is_active, 
#    f.conditions, 
    tarif_set_must_include_tarif_options, 
#    (f.created_at.to_formatted_s(:short) if  f.created_at), 
#    (f.updated_at.to_formatted_s(:short) if f.updated_at), 
#    link_to( 'Show', f), 
#    link_to( 'Edit', edit_price_list_path(f)), 
#    link_to( 'Destroy', f, method: :delete, data: { confirm: 'Are you sure?' } )
  ] 
  end
end
%>

service_category_calls_id